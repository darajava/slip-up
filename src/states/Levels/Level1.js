// import Background from '../../objects/Background';
import Player from '../../objects/Player';
import Controls from '../../objects/Controls';
import Coin from '../../objects/Coin';
import Bomb from '../../objects/Bomb';
// import TextOverlay from '../../objects/TextOverlay';
// import LevelEnd from '../../objects/LevelEnd';
// import Level1 from '../objects/Level1';


// todo: probably rename because i think there will only be one long level
class Level1 extends Phaser.State {

  create() {
    // this.game.world.scale.set(window.devicePixelRatio);
    this.game.stage.backgroundColor = "#fff";
    this.midX = window.innerWidth / 2;
    let midY = window.innerHeight / 2;
    let bottomY = window.innerHeight / 3 * 2;
    this.plusPixels = 0;
 
    // this.background = this.game.add.tileSprite(0, 0, 600, 100, 'road');
    // this.background.height = bottomY;
    // this.background.width = 600;

    // this.background.scale.x = (this.game.width / this.background.width);
    this.time = new Date();

    this.line1 = new Phaser.Line(this.midX, 0, this.midX, window.innerHeight);
    this.line2 = new Phaser.Line(0, bottomY, window.innerWidth, bottomY);

    this.joysticks = [
      [
        this.midX / 2,
        (window.innerHeight + bottomY) / 2,
      ],
      [
        this.midX / 2 * 3,
        (window.innerHeight + bottomY) / 2,
      ],
    ];

    this.players = [
      new Player(this.game, [this.midX / 2, midY]),
      new Player(this.game, [this.midX / 2 * 3, midY]),
    ]

    this.controls = [
      new Controls(this.game, this.joysticks[0], this.players[0].update),
      new Controls(this.game, this.joysticks[1], this.players[1].update),
    ];

    // these lines generated by parseLevel.js
this.coins1 = [[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5],[6],[7],[7],[6],[5],[4],[3],[2],[3],[4],[5],[6],[5],[4],[3],[2],[3],[4],[5],[6],[4],[2],[4],[6],[4],[2],[],[],[],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5],[6],[7],[7],[6],[5],[4],[3],[2],[3],[4],[5],[6],[5],[4],[3],[2],[3],[4],[5],[6],[4],[2],[4],[6],[4],[2],[4],[6],[6],[],[],[],[],[],[7],[6],[5],[4],[3],[2],[2],[3],[4],[5],[6],[7],[7],[6],[5],[4],[3],[2],[2],[3],[4],[5],[6],[7],[7],[6],[5],[4],[3],[2],[2],[3],[4],[5],[6],[7],[7],[6],[5],[4],[4],[4],[4],[4],[4],[4],[],[],[],[],[],[],[],[],[],[],[],[],[],[4],[4],[4],[4],[4],[4],[3],[5],[6],[5],[4],[5,6],[6],[5],[4],[3],[3],[5],[5],[4],[3],[4],[5],[4],[4],[4],[4],[4],[],[],[],[],[],[],[],[],[],[],[1,7],[],[],[],[],[],[],[],[],[],[2,3,4,5,6],[],[],[],[2,3,4,5,6],[],[],[],[],[],[],[7],[7],[7],[7],[4,5,6,7],[7],[7],[7],[7],[7],[7],[3,4,5,6,7],[7],[7],[7],[7],[2,3,4,5,6,7],[7],[]];
this.coins2 = [[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[3],[2],[1],[1],[2],[3],[4],[5],[6],[5],[4],[3],[2],[3],[4],[5],[6],[5],[4],[3],[2],[4],[6],[4],[2],[4],[6],[],[],[],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[3],[2],[1],[1],[2],[3],[4],[5],[6],[5],[4],[3],[2],[4],[6],[4],[2],[4],[6],[6],[6],[4],[2],[4],[6],[4],[2],[4],[6],[6],[],[],[],[],[],[6],[4],[2],[4],[6],[4],[2],[4],[6],[4],[2],[4],[6],[4],[2],[4],[6],[4],[2],[4],[6],[4],[2],[4],[6],[4],[2],[4],[6],[4],[2],[4],[6],[4],[2],[2],[2],[3],[4],[4],[4],[4],[4],[4],[4],[4],[],[],[],[],[],[],[],[],[],[],[],[],[],[4],[4],[4],[4],[4],[4],[5],[3],[4],[5],[6],[7],[1],[2],[3],[4],[5],[6],[7],[7],[7],[6],[5],[4],[4],[4],[4],[4],[],[],[],[],[],[],[1,7],[],[],[],[],[],[],[],[],[2,3,4,5,6],[],[],[],[],[],[],[],[],[2,3,4,5,6],[],[],[],[],[],[],[1],[1],[1],[1],[1],[1],[1],[1,2,3,4],[1],[1],[1],[1,2,3,4,5],[1],[1],[1],[1,2,3,4,5,6],[1],[1],[]];
this.bombs
this.bombs

    this.group = this.game.add.physicsGroup();

    this.limit = 10;
    this.lastCoinGenerated = this.limit;

    for (let i = 0; i < this.limit; i++) {
      this.addCoin(i, this.coins1[i]);
    }

    for (let i = 0; i < this.limit; i++) {
      this.addCoin(i, this.coins2[i], true);
    }

    for (let i = 0; i < this.bombs1.length; i++) {
      this.addBomb(i, this.bombs1[i]);
    }

    for (let i = 0; i < this.bombs2.length; i++) {
      this.addBomb(i, this.bombs2[i], true);
    }

    this.drawLine(this.line1)
    this.drawLine(this.line2)

    // this.addCoinToGroup = this.addCoinToGroup.bind(this)
  }

  addCoin(y, coinArr, player2) {
    let step = 80;
    let timePassed = (new Date() - this.time) / 1000;

console.log(timePassed * 300)
    for (let i = 0; i < coinArr.length; i++) {
      let coin = new Coin(
          this.game,
          27 + coinArr[i] * (this.midX / 9) + (player2 ? this.midX : 0),
          (-(y * step)) + this.plusPixels,
          this.players[0],
        ).getSprite();

      coin.inputEnabled = true;
      this.group.add(coin);
    }
  }


  addBomb(y, bombArr, player2) {
    let step = 80;

    for (let i = 0; i < bombArr.length; i++)
      this.group.add(
        new Bomb(
          this.game,
          bombArr[i] * (this.midX / 9) + (player2 ? this.midX : 0),
          -(y * step),
          this.players[0]
        ).getSprite()
      );
  }

  drawLine(line) {
    let graphics = this.game.add.graphics(0,0);
    //var graphics=game.add.graphics(line.start.x,line.start.y);//if you have a static line
    graphics.lineStyle(10, 0x000000, 1);
    graphics.moveTo(line.start.x,line.start.y);//moving position of graphic if you draw mulitple lines
    graphics.lineTo(line.end.x,line.end.y);
    graphics.endFill();
  }

  fixDensity() {
  
  }

  update() {
    this.game.physics.arcade.collide(
      this.players[0].getSprite(),
      this.group,
      this.collisionHandler,
      this.processHandler,
      this
    );

    this.game.physics.arcade.collide(
      this.players[1].getSprite(),
      this.group,
      this.collisionHandler,
      this.processHandler,
      this
    );

    for (let i = 0; i < this.group.children.length; i++) {
      this.group.children[i].body.position.y += 5;

      if (this.group.children[i].body.position.y > this.game.height) {
        this.game.state.start("Level1");
        this.game.sound.play("lose");
        this.group.remove(this.group.children[i]);
        // this.collisionHandler();
      }
    }
    
    this.plusPixels += 5;
  }

  processHandler(player, coin) {
    return true;
  }

  collisionHandler(player, coin) {
    // console.log('collisionHandler')
    // coin.kill();
    // player.body.velocity.y = 0;
    // console.log('len', this.group.length);


    if (this.coins1[this.lastCoinGenerated])
      this.addCoin(this.lastCoinGenerated, this.coins1[this.lastCoinGenerated]);
    if (this.coins2[this.lastCoinGenerated])
      this.addCoin(this.lastCoinGenerated, this.coins2[this.lastCoinGenerated++], true);
    


  }

}

export default Level1;
